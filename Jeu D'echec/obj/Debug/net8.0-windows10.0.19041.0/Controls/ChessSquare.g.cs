#pragma checksum "C:\Users\Administrateur\source\repos\Jeu D'echec\Jeu D'echec\Controls\ChessSquare.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "B100E32E89A540F7EF5C1677E366E9B750A9636F8E250BB813A64064F4327B39"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jeu_D_echec.Controls
{
    partial class ChessSquare : 
        global::Microsoft.UI.Xaml.Controls.UserControl, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_Panel_Background(global::Microsoft.UI.Xaml.Controls.Panel obj, global::Microsoft.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Border_Background(global::Microsoft.UI.Xaml.Controls.Border obj, global::Microsoft.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Foreground(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::Microsoft.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class ChessSquare_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IChessSquare_Bindings
        {
            private global::Jeu_D_echec.Controls.ChessSquare dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Grid obj15;
            private global::Microsoft.UI.Xaml.Controls.Border obj16;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj20;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj15BackgroundDisabled = false;
            private static bool isobj16BackgroundDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj20ForegroundDisabled = false;

            private ChessSquare_obj1_BindingsTracking bindingsTracking;

            public ChessSquare_obj1_Bindings()
            {
                this.bindingsTracking = new ChessSquare_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 97 && columnNumber == 11)
                {
                    isobj15BackgroundDisabled = true;
                }
                else if (lineNumber == 104 && columnNumber == 17)
                {
                    isobj16BackgroundDisabled = true;
                }
                else if (lineNumber == 144 && columnNumber == 20)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 149 && columnNumber == 20)
                {
                    isobj20ForegroundDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15: // Controls\ChessSquare.xaml line 96
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                        break;
                    case 16: // Controls\ChessSquare.xaml line 103
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                        break;
                    case 20: // Controls\ChessSquare.xaml line 143
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IChessSquare_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Jeu_D_echec.Controls.ChessSquare>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Jeu_D_echec.Controls.ChessSquare obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SquareColor(obj.SquareColor, phase);
                        this.Update_Piece(obj.Piece, phase);
                        this.Update_PieceColor(obj.PieceColor, phase);
                    }
                }
            }
            private void Update_SquareColor(global::Microsoft.UI.Xaml.Media.Brush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\ChessSquare.xaml line 96
                    if (!isobj15BackgroundDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Panel_Background(this.obj15, obj, null);
                    }
                    // Controls\ChessSquare.xaml line 103
                    if (!isobj16BackgroundDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Border_Background(this.obj16, obj, null);
                    }
                }
            }
            private void Update_Piece(global::Jeu_D_echec.Models.ChessPiece obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Piece_UnicodeSymbol(obj.UnicodeSymbol, phase);
                    }
                }
            }
            private void Update_Piece_UnicodeSymbol(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\ChessSquare.xaml line 143
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }
            private void Update_PieceColor(global::Microsoft.UI.Xaml.Media.Brush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\ChessSquare.xaml line 143
                    if (!isobj20ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Foreground(this.obj20, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ChessSquare_obj1_BindingsTracking
            {
                private global::System.WeakReference<ChessSquare_obj1_Bindings> weakRefToBindingObj; 

                public ChessSquare_obj1_BindingsTracking(ChessSquare_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ChessSquare_obj1_Bindings>(obj);
                }

                public ChessSquare_obj1_Bindings TryGetBindingObject()
                {
                    ChessSquare_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void DependencyPropertyChanged_SquareColor(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ChessSquare_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Jeu_D_echec.Controls.ChessSquare obj = sender as global::Jeu_D_echec.Controls.ChessSquare;
                        if (obj != null)
                        {
                            bindings.Update_SquareColor(obj.SquareColor, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_Piece(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ChessSquare_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Jeu_D_echec.Controls.ChessSquare obj = sender as global::Jeu_D_echec.Controls.ChessSquare;
                        if (obj != null)
                        {
                            bindings.Update_Piece(obj.Piece, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_SquareColor = 0;
                private long tokenDPC_Piece = 0;
                public void UpdateChildListeners_(global::Jeu_D_echec.Controls.ChessSquare obj)
                {
                    ChessSquare_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Jeu_D_echec.Controls.ChessSquare.SquareColorProperty, tokenDPC_SquareColor);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Jeu_D_echec.Controls.ChessSquare.PieceProperty, tokenDPC_Piece);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_SquareColor = obj.RegisterPropertyChangedCallback(global::Jeu_D_echec.Controls.ChessSquare.SquareColorProperty, DependencyPropertyChanged_SquareColor);
                            tokenDPC_Piece = obj.RegisterPropertyChangedCallback(global::Jeu_D_echec.Controls.ChessSquare.PieceProperty, DependencyPropertyChanged_Piece);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Controls\ChessSquare.xaml line 13
                {
                    this.SelectionAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>(target);
                }
                break;
            case 3: // Controls\ChessSquare.xaml line 36
                {
                    this.ValidMoveAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>(target);
                }
                break;
            case 4: // Controls\ChessSquare.xaml line 59
                {
                    this.PieceAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>(target);
                }
                break;
            case 5: // Controls\ChessSquare.xaml line 76
                {
                    this.CheckAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>(target);
                }
                break;
            case 6: // Controls\ChessSquare.xaml line 77
                {
                    this.CheckColorAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>(target);
                }
                break;
            case 7: // Controls\ChessSquare.xaml line 60
                {
                    this.PieceScaleAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 8: // Controls\ChessSquare.xaml line 67
                {
                    this.PieceScaleYAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 9: // Controls\ChessSquare.xaml line 37
                {
                    this.ValidMoveScaleAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 10: // Controls\ChessSquare.xaml line 44
                {
                    this.ValidMoveScaleYAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 11: // Controls\ChessSquare.xaml line 51
                {
                    this.ValidMoveOpacityAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 12: // Controls\ChessSquare.xaml line 14
                {
                    this.SelectionScaleAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 13: // Controls\ChessSquare.xaml line 21
                {
                    this.SelectionScaleYAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 14: // Controls\ChessSquare.xaml line 28
                {
                    this.SelectionOpacityAnimation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>(target);
                }
                break;
            case 15: // Controls\ChessSquare.xaml line 96
                {
                    this.SquareGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.SquareGrid).PointerPressed += this.OnPointerPressed;
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.SquareGrid).PointerEntered += this.OnPointerEntered;
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.SquareGrid).PointerExited += this.OnPointerExited;
                }
                break;
            case 16: // Controls\ChessSquare.xaml line 103
                {
                    this.BaseBorder = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            case 17: // Controls\ChessSquare.xaml line 111
                {
                    this.SelectionBorder = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            case 18: // Controls\ChessSquare.xaml line 123
                {
                    this.ValidMoveIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Ellipse>(target);
                }
                break;
            case 19: // Controls\ChessSquare.xaml line 137
                {
                    this.CheckBorder = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            case 20: // Controls\ChessSquare.xaml line 143
                {
                    this.PieceText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 21: // Controls\ChessSquare.xaml line 157
                {
                    this.HoverBorder = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Controls\ChessSquare.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.UserControl element1 = (global::Microsoft.UI.Xaml.Controls.UserControl)target;
                    ChessSquare_obj1_Bindings bindings = new ChessSquare_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

